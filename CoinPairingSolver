import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class CoinPairingSolver {

    private int[] coins;
    private int jumps;
    private int size;
    private int moves;
    private boolean isPaired;

    public CoinPairingSolver(int size) {
        coins = new int[size + 1];
        jumps = 1;
        this.size = size;
        Arrays.fill(coins, 1);
    }

    private int findRightmostCoin() {
        int i = size;
        while (i > 0) {
            if (coins[i] == 1) {
                return i;
            }
            i--;
        }
        return -1;
    }

    private int findLeftTarget(int rightmost) {
        jumps++;
        int i = rightmost - 1;
        int tempDistance = 0;
        while (i >= 0) {
            if (coins[i] == 1) {
                tempDistance++;
            }
            if (jumps == tempDistance) {
                return i;
            }
            i--;
        }
        return -1;
    }

    private int findRightTarget(int leftmost) {
        jumps++;
        int i = leftmost + 1;
        int tempDistance = 0;
        while (i <= size) {
            if (coins[i] == 2) {
                tempDistance += 2;
            } else if (coins[i] == 1) {
                tempDistance++;
            }
            if (jumps == tempDistance) {
                return i;
            }
            i++;
        }
        return -1;
    }

    public int pairCoins() throws IllegalArgumentException {
        if (size % 4 != 0) {
            System.out.println("n is not a multiple of 4");
        }
        int rightmost = 0, target = 0, leftmost = 0;
        int i = 1;
        i = size / 4 - 1;
        while (i >= 1) {
            rightmost = -1;
            int j = size;
            while (j >= 1) {
                if (coins[j] == 1) {
                    rightmost = j;
                    break;
                }
                j--;
            }

            if (rightmost == -1) {
                System.out.println("No rightmost coin found");
            }
            target = findLeftTarget(rightmost);
            coins[target]--;
            coins[rightmost]++;
            moves++;
            i--;
        }
        i = size / 4;
        while (i <= size / 2) {
            leftmost = -1;
            int j = 1;
            while (j <= size) {
                if (coins[j] == 1) {
                    leftmost = j;
                    break;
                }
                j++;
            }
            if (leftmost == -1) {
                System.out.println("No leftmost coin found");
            }
            target = findRightTarget(leftmost);
            coins[leftmost]--;
            coins[target]++;
            moves++;
            i++;
        }
        isPaired = true;
        return moves;
    }

    public int[] getPairedCoins() throws IllegalAccessException {
        if (!isPaired) {
            System.out.println("is not pair");
        }
        return Arrays.copyOfRange(coins, 1, size + 1);
    }

    public static void main(String[] args) throws IllegalAccessException {
        System.out.println("Please enter a numer of coins (must be multiple of 4): ");
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        CoinPairingSolver solver = new CoinPairingSolver(n);
        int moves = solver.pairCoins();
        int[] pairedCoins = null;

        pairedCoins = solver.getPairedCoins();

        for (int i = 0; i < pairedCoins.length; i++) {
            System.out.print(pairedCoins[i] + " ");
        }
        System.out.println("");
        System.out.println("Number of moves this  coins: " + moves);
    }
}
